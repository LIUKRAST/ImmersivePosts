import net.minecraftforge.gradle.common.task.SignJar

buildscript {
	repositories {
		maven { url = 'https://files.minecraftforge.net/maven' }
		jcenter()
		mavenCentral()
	}
	dependencies {
		classpath group: 'net.minecraftforge.gradle', name: 'ForgeGradle', version: '4.1+', changing: true
	}
}
apply plugin: 'net.minecraftforge.gradle'
apply plugin: 'eclipse'
apply plugin: 'maven-publish'
sourceCompatibility = targetCompatibility = compileJava.sourceCompatibility = compileJava.targetCompatibility = '1.8'

//----------------------------------------------------------------------------------------------------------------------

version = "${version_immersiveposts}"
group = "twistedgate.immersiveposts"
archivesBaseName = "immersiveposts-${version_minecraft}"

repositories {
	maven {	name = "BlameJared"; url = "https://maven.blamejared.com/" } // IE files
}

sourceSets {
	main {
		resources {
			srcDirs = [
				"$rootDir/src/main/resources",
				"$rootDir/src/generated/resources"
			]
		}
	}
	
	datagen {
		compileClasspath += main.compileClasspath
		runtimeClasspath += main.runtimeClasspath
		compileClasspath += main.output
		runtimeClasspath += main.output
	}
}

minecraft {
	mappings channel: 'snapshot', version: "${version_fml_mappings}"
	// accessTransformer = file('build/resources/main/META-INF/accesstransformer.cfg')
	runs {
		client {
			workingDirectory project.file('run')
			property 'forge.logging.markers', ''
			property 'forge.logging.console.level', 'info'
			property 'fml.earlyprogresswindow', 'false'
			property 'mixin.env.disableRefMap', 'true'
			mods {
				immersiveposts {
					source sourceSets.main
				}
			}
		}
		
		server {
			workingDirectory project.file('run')
			property 'forge.logging.markers', ''
			property 'forge.logging.console.level', 'info'
			property 'fml.earlyprogresswindow', 'false'
			property 'mixin.env.disableRefMap', 'true'
			
			arg '-nogui'
			
			mods {
				immersiveposts {
					source sourceSets.main
				}
			}
		}
		
		data {
			workingDirectory project.file('run')
			property 'forge.logging.markers', ''
			property 'forge.logging.console.level', 'info'
			property 'fml.earlyprogresswindow', 'false'
			property 'mixin.env.disableRefMap', 'true'
			args '--mod', 'immersiveposts',
				 '--all',
				 '--output', file('src/generated/resources/'),
				 '--validate',
				 '--existing', sourceSets.main.resources.srcDirs[0],
				 '--existing-mod', 'immersiveengineering'
			mods {
				immersiveposts {
					source sourceSets.main
					source sourceSets.datagen
				}
			}
		}
	}
}

dependencies {
	minecraft "net.minecraftforge:forge:${version_minecraft}-${version_forge}"
	
	compile fg.deobf("blusunrize.immersiveengineering:ImmersiveEngineering:${version_ie}")
	//compile fg.deobf("blusunrize.immersiveengineering:ImmersiveEngineering:${version_ie}:api")
	datagenCompile fg.deobf("blusunrize.immersiveengineering:ImmersiveEngineering:${version_ie}:datagen")
}

processResources {
	inputs.properties 'version': project.version

	filesMatching("META-INF/mods.toml") {
        expand 'version': project.version
    }
}

jar {
	manifest {
		attributes([
			"Specification-Title": "immersiveposts",
			"Specification-Vendor": "TwistedGate",
			"Specification-Version": "1",
			"Implementation-Title": project.name,
			"Implementation-Version": "${version_immersiveposts}",
			"Implementation-Vendor" :"TwistedGate",
			"Implementation-Timestamp": new Date().format("yyyy-MM-dd'T'HH:mm:ssZ")
		])
	}
}



def reobfFile = file("$buildDir/reobfJar/output.jar")
def reobfArtifact = artifacts.add('default', reobfFile) { type 'jar'; builtBy 'reobfJar'; }

task signJar(type: SignJar, dependsOn: jar) {
	onlyIf { project.hasProperty('keyStore') }
	if (project.hasProperty('keyStore')) {
		alias = project.alias
		storePass = project.storePass
		keyPass = project.storePass
		keyStore = project.keyStore
		inputFile = jar.archivePath
		outputFile = jar.archivePath
	}
}
build.dependsOn signJar

task datagenJar(type: Jar, dependsOn: datagenClasses) {
	classifier = 'datagen'
	from sourceSets.datagen.output
	manifest {
		attributes "FMLModType": "LIBRARY"
	}
}

task sourcesJar(type: Jar, dependsOn: classes) {
	classifier = 'sources'
	from sourceSets.main.allSource
}

publishing {
	publications { mavenJava(MavenPublication) { artifact reobfArtifact } }
	
	repositories { maven { url "file:///${project.projectDir}/mcmodsrepo" } }
}
